{"version":3,"sources":["components/CommentInfo/CommentInfo.jsx","components/CommentList/CommentList.jsx","components/UserInfo/UserInfo.jsx","components/PostInfo/PostInfo.jsx","components/PostList/PostList.jsx","App.jsx","index.jsx"],"names":["CommentInfo","comment","name","email","body","className","href","CommentList","comments","map","id","UserInfo","user","PostInfo","post","title","length","PostList","posts","App","cmnts","users","preparedPosts","commentsFromServer","usersFromServer","postsFromServer","find","userId","filter","postId","ReactDOM","render","document","getElementById"],"mappings":"218IAAaA,EAAc,SAAC,GAAD,QAAGC,QAAWC,EAAd,EAAcA,KAAMC,EAApB,EAAoBA,MAAOC,EAA3B,EAA2BA,KAA3B,OACzB,sBAAKC,UAAU,cAAf,UACE,sBAAKA,UAAU,qBAAf,UACE,wBAAQA,UAAU,oBAAlB,SAAuCH,IAEtC,OAED,mBACEG,UAAU,qBACVC,KAAI,iBAAYH,GAFlB,SAIGA,OAIL,qBAAKE,UAAU,oBAAf,SACGD,QCbMG,EAAc,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACzB,qBAAKH,UAAU,cAAf,SACGG,EAASC,KAAI,SAAAR,GAAO,OACnB,cAAC,EAAD,CACEA,QAASA,GACJA,EAAQS,UCNRC,G,MAAW,SAAC,GAAD,QAAGC,KAAQV,EAAX,EAAWA,KAAMC,EAAjB,EAAiBA,MAAjB,OACtB,mBAAGE,UAAU,WAAWC,KAAI,iBAAYH,GAAxC,SACGD,MCAQW,EAAW,SAAC,GAAD,QAAGC,KAAQC,EAAX,EAAWA,MAAOX,EAAlB,EAAkBA,KAAMQ,EAAxB,EAAwBA,KAAMJ,EAA9B,EAA8BA,SAA9B,OACtB,sBAAKH,UAAU,WAAf,UACE,sBAAKA,UAAU,mBAAf,UACE,oBAAIA,UAAU,kBAAd,SAAiCU,IAEjC,8BACG,eAEAH,GAAQ,cAAC,EAAD,CAAUA,KAAMA,UAI7B,mBAAGP,UAAU,iBAAb,SACGD,IAGFI,EAASQ,OAAS,EAEf,cAAC,EAAD,CACER,SAAUA,IAIZ,qCACE,uBACA,mBAAG,UAAQ,oBAAX,oCC1BGS,EAAW,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACtB,qBAAKb,UAAU,WAAf,SACGa,EAAMT,KAAI,SAAAK,GAAI,OACb,cAAC,EAAD,CACEA,KAAMA,GACDA,EAAKJ,U,qBCOLS,EAAM,WACjB,IAT2BC,EAAOC,EAS5BC,GATqBF,EAWzBG,EAXgCF,EAYhCG,EAFAC,EATIhB,KAAI,SAAAK,GAAI,kCACTA,GADS,IAEZF,KAAMS,EAAMK,MAAK,SAAAd,GAAI,OAAIA,EAAKF,KAAOI,EAAKa,WAAW,KACrDnB,SAAUY,EAAMQ,QAAO,SAAA3B,GAAO,OAAIA,EAAQ4B,SAAWf,EAAKJ,YAW5D,OACE,0BAASL,UAAU,MAAnB,UACE,oBAAIA,UAAU,aAAd,kCACA,cAAC,EAAD,CAAUa,MAAOI,QCrBvBQ,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.6c2efa1b.chunk.js","sourcesContent":["export const CommentInfo = ({ comment: { name, email, body } }) => (\n  <div className=\"CommentInfo\">\n    <div className=\"CommentInfo__title\">\n      <strong className=\"CommentInfo__name\">{name}</strong>\n\n      {' by '}\n\n      <a\n        className=\"CommentInfo__email\"\n        href={`mailto:${email}`}\n      >\n        {email}\n      </a>\n    </div>\n\n    <div className=\"CommentInfo__body\">\n      {body}\n    </div>\n  </div>\n);\n","import './CommentList.scss';\nimport { CommentInfo } from '../CommentInfo';\n\nexport const CommentList = ({ comments }) => (\n  <div className=\"commentList\">\n    {comments.map(comment => (\n      <CommentInfo\n        comment={comment}\n        key={comment.id}\n      />\n    ))}\n  </div>\n);\n","import './UserInfo.scss';\n\nexport const UserInfo = ({ user: { name, email } }) => (\n  <a className=\"UserInfo\" href={`mailto:${email}`}>\n    {name}\n  </a>\n);\n","import './PostInfo.scss';\nimport { CommentList } from '../CommentList';\nimport { UserInfo } from '../UserInfo';\n\nexport const PostInfo = ({ post: { title, body, user, comments } }) => (\n  <div className=\"PostInfo\">\n    <div className=\"PostInfo__header\">\n      <h3 className=\"PostInfo__title\">{title}</h3>\n\n      <p>\n        {' Posted by  '}\n\n        {user && <UserInfo user={user} />}\n      </p>\n    </div>\n\n    <p className=\"PostInfo__body\">\n      {body}\n    </p>\n\n    {comments.length > 0\n      ? (\n        <CommentList\n          comments={comments}\n        />\n      )\n      : (\n        <>\n          <hr />\n          <b data-cy=\"NoCommentsMessage\">No comments yet</b>\n        </>\n      )\n    }\n\n  </div>\n);\n","import './PostList.scss';\nimport { PostInfo } from '../PostInfo';\n\nexport const PostList = ({ posts }) => (\n  <div className=\"PostList\">\n    {posts.map(post => (\n      <PostInfo\n        post={post}\n        key={post.id}\n      />\n    ))}\n  </div>\n);\n","import './App.scss';\nimport { PostList } from './components/PostList';\n\nimport postsFromServer from './api/posts.json';\nimport commentsFromServer from './api/comments.json';\nimport usersFromServer from './api/users.json';\n\nconst preparePosts = (posts, cmnts, users) => (\n  posts.map(post => ({\n    ...post,\n    user: users.find(user => user.id === post.userId) || null,\n    comments: cmnts.filter(comment => comment.postId === post.id),\n  }))\n);\n\nexport const App = () => {\n  const preparedPosts = preparePosts(\n    postsFromServer,\n    commentsFromServer,\n    usersFromServer,\n  );\n\n  return (\n    <section className=\"App\">\n      <h1 className=\"App__title\">Static list of posts</h1>\n      <PostList posts={preparedPosts} />\n    </section>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}